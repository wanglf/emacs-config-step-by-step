* About
This is an Org-mode document that serves as my Emacs configuration file.  The standard =init.el= file simply loads the Org babel and org-tangle packages needed to "tangle" this file into a usable form.

=emacs-config.org= is processed to a Lisp file called =emacs-config.el=, and =emacs-config.el= is what Emacs actually uses to configure settings.

* Package system
#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
  (require 'package) 
  (add-to-list 'package-archives
               '("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))

;; import common-lisp
(require 'cl-lib)


;; add whatever packages you want here
(defvar wanglifeng/packages '(
                              leuven-theme
                              evil
                              auto-complete
                              ido-completing-read+
                              smex
                              idomenu
                              neotree
                              magit
                              powerline
                              simpleclip
                              ) "Default packages")

(defun wanglifeng/packages-installed-p()
  (cl-loop for pkg in wanglifeng/packages
        when (not (package-installed-p pkg)) do (return nil)
        finally (return t)))

(unless (wanglifeng/packages-installed-p)
  (message "%s" "Refreshing package database...")
  (package-refresh-contents)
  (dolist (pkg wanglifeng/packages)
    (when (not (package-installed-p pkg))
      (package-install pkg))))
#+END_SRC

* Basic usability
** autobackup
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files
#+END_SRC

** appearence
#+BEGIN_SRC emacs-lisp
;; hide bars
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; set theme to leuven
(load-theme 'leuven t)

;; org fontify
(setq org-src-fontify-natively t)
(setq org-fontify-whole-heading-line t)

;; fullscreen on startup
(setq initial-frame-alist (quote((fullscreen . maximized))))

;; show match parents
(add-hook 'emacs-lisp-mode-hook 'show-paren-mode)

;; highlight current line
(global-hl-line-mode t)
#+END_SRC

** recent files
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq rencentf-max-menu-items 25)
#+END_SRC

** evil
#+BEGIN_SRC emacs-lisp
(setq evil-want-C-i-jump nil)
(require 'evil)
(evil-mode )
#+END_SRC

** auto-complete
#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)
#+END_SRC

** ido mode
#+BEGIN_SRC emacs-lisp
;; Use C-f during file selection to switch to regular find-file
(require 'ido)
(ido-mode t)
(ido-everywhere t)
(setq ido-enable-flex-matching t)
(setq ido-use-filename-at-point nil)
(setq ido-auto-merge-work-directories-length 0)
(setq ido-use-virtual-buffers t)

(ido-ubiquitous-mode 1)

;; Use smex to handle M-x
  ;; Change path for ~/.smex-items
(setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
(global-set-key [remap execute-extended-command] 'smex)

;; Allow the same buffer to be open in different frames
(setq ido-default-buffer-method 'selected-window)

;; http://www.reddit.com/r/emacs/comments/21a4p9/use_recentf_and_ido_together/cgbprem
(add-hook 'ido-setup-hook (lambda () (define-key ido-completion-map [up] 'previous-history-element)))
#+END_SRC

** neotree
#+BEGIN_SRC emacs-lisp
(setq neo-smart-open t)
(evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
(evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-enter)
(evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
(evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
#+END_SRC

** magit

** powerline
#+BEGIN_SRC emacs-lisp
(require 'powerline)
(powerline-default-theme)
#+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0)

;; line wrap
(add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-cb" 'org-iswitchb)
(setq org-log-done 'time)

;; org-babel
(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (ditaa . nil)
     (dot . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (haskell . t)
     (latex . t)
     (ocaml . nil)
     (octave . t)
     (perl . t)
     (python . t)
     (ruby . t)
     (screen . nil)
     (sql . t)
     (sqlite . t))))

;; latex export class
(require 'ox-latex)
(add-to-list 'org-latex-classes
             '("book"
               "\\documentclass{book}"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
             )

;; use xelatex to export pdf files
(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

;; minted
(setq org-latex-listings 'minted)
(add-to-list 'org-latex-packages-alist '("" "minted"))
             
(setq org-latex-minted-options
      '(("frame" "lines")
        ("fontsize" "\\scriptsize")
        ("linenos" "false")
        ("numbersep" "5pt")
        ("framesep" "2mm")))

;; agenda files
(setq org-agenda-files
      '("~/git/private-org/task/inbox.org"
        "~/git/private-org/task/task.org"
        "~/git/private-org/task/finished.org"))

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)"))))

#+END_SRC

* GnuPG
#+BEGIN_SRC emacs-lisp
(require 'epa-file)
(custom-set-variables '(epg-gpg-program  "/usr/local/bin/gpg"))
(epa-file-enable)
#+END_SRC
* SimpleClip
#+BEGIN_SRC emacs-lisp
(simpleclip-mode 1)
#+END_SRC
